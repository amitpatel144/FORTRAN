!*********************************************************
!*   Calculate the coefficients of the characteristic    *
!*   polynomial P(l)=A-l*I of a square symmetric real    *
!*         matrix A(i,j) by Lanczos's method             *
!* ----------------------------------------------------- *
!* Ref.: "Algèbre, Algorithmes et programmes en Pascal   *
!*        By Jean-Louis Jardrin, DUNOD Paris, 1988"      *
!*        [BIBLI 10].                                    *
!* ----------------------------------------------------- *
!* SAMPLE RUN:                                           *
!* (Find the caracteristic polynomial of matrix:         *
!*          10  7   8   7                                *
!*      A =  7  5   6   5                                *
!*           8  6  10   9                                *
!*           7  5   9  10                                *
!*                                                       *
!* Input matrix size (max 50): 4                         *
!*  Line 1:                                              *
!*   Element 1: 10                                       *
!*   Element 2: 7                                        *
!*   Element 3: 8                                        *
!*   Element 4: 7                                        *
!*  Line 2:                                              *
!*   Element 2: 5                                        *
!*   Element 3: 6                                        *
!*   Element 4: 5                                        *
!*  Line 3:                                              *
!*   Element 3: 10                                       *
!*   Element 4: 9                                        *
!*  Line 4:                                              *
!*   Element 4: 10                                       *
!*                                                       *
!* Chracteristic polynomial P(l):                        *
!* Coefficient for degree 4:     1.000000                *
!* Coefficient for degree 3:   -35.000000                *
!* Coefficient for degree 2:   146.000000                *
!* Coefficient for degree 1:  -100.000000                *
!* Coefficient for degree 0:     1.000000                *
!*                                                       *
!* (The characteristic polynomial of matrix A is:        *
!*   P(l)=l^4-35*l^3+146*l^2-100*l+1 )                   *
!*                                                       *
!*                  F90 version by J-P Moreau, Paris     *
!*  (with dynamically allocated vectors and matrices).   *
!*                        (www.jpmoreau.fr)              *
!*********************************************************
Program CARPOL3

integer it,k,n, ialloc
real*8  eps
real*8, pointer :: A(:,:), Tau(:,:)
real*8, pointer :: D(:), E(:), P(:) 

  !read size n of matrix A(n,n)
  print *,' '
  write(*,10,advance='no'); read *, n
  !allocate matrices and vectors
  allocate(A(1:n,1:n),stat=ialloc)
  allocate(Tau(1:n,1:n),stat=ialloc)
  allocate(D(1:n),stat=ialloc)
  allocate(E(1:n),stat=ialloc)
  allocate(P(1:n+1),stat=ialloc)
  !read A matrix
  call Read_data(n, A)
  !fix precision
  eps=1.d-10
  !tridiagonalize symmetric A matrix by Lanczos's method
  call TDSL(eps,n,A,it,D,E,TAU)
  !if success, use method for a tridiagonal matrix
  if (it==1)  call PCTR(n,E,D,P)
  !print results
  print *,' '
  if (it.eq.0) then
    print *,' Method failed.'
  else 
    print *,' Characteristic polynomial P(l):'
    do k=1, n+1
      write(*,20) n-k+1, P(k)
    end do
  end if
  print *,' '
  print *,' '

10 format(' Input matrix size: ') 
20 format(' Coefficient for degree ',I2,': ',F12.6)   

END


!read symmetric matrix A(n,n)
Subroutine Read_data(n,A)
  integer n,  i,j
  real*8 A(1:n,1:n)
  do i=1, n
    print *,' '
	write(*,10)  i
    do j=i, n
      write(*,20,advance='no')  j; read *, A(i,j)
      if (j.ne.i)  A(j,i)=A(i,j)
    end do
  end do
  return
10 format(' Line ',I2)
20 format('  Element ',I2,': ')
End

!*********************************************************
!* The TDSL procedure tridiagonalizes the symmetric real *
!* matrix A(n,n) by Lanczos's method. Only the main dia- *
!* gonal terms and the supradiagonal terms are calculated*
!* ----------------------------------------------------- *
!* Inputs:                                               *
!*          eps  precision (double)                      *
!*          n    size of square A matrix (integer)       *
!*          A    square real symmetric matrix (n,n)      *
!* Outputs:                                              *
!*          it   flag=0 if method failed, else =1        *
!*          D    vector of size n+1 storing the n        *
!*               elements of the main diagonal.          *
!*          E    vector of size n+1 storing the n-1      *
!*               elements of the supradiagonal.          *
!*          Tau  Utility matrix used by the method.      *
!*                                                       *
!*   The types pV (pointer to a real vector) and pM      *
!*   (pointer to a real matrix) must be declared and     *
!*   allocated in the calling program.                   *
!*********************************************************
Subroutine TDSL(eps,n,A,it,D,E,Tau)
  integer n, it
  real*8 eps,A(1:n,1:n),D(1:n),E(1:n),Tau(1:n,1:n)
  integer i,j,k, ialloc1
  real*8  s,u0,v0
  real*8, pointer :: W(:)
  !initialize local vector W
  allocate(W(1:n),stat=ialloc1)
  Tau(1,1)=1.d0
  do i=2, n 
    Tau(i,1)=0.d0
  end do
  u0=1.d0; it=1; k=1
  do while(k<=n.and.it.eq.1)
    do i=1, n
      s=0.d0
      do j=1, n 
	    s=s+A(i,j)*Tau(j,k)
      end do
      W(i)=s
    end do
    s=0.d0
	do i=1, n
	  s=s+Tau(i,k)*W(i)
    end do
    D(k)=s/u0
    if (k.ne.n) then
      do i=1, n
        if (k==1) then
          Tau(i,k+1)=W(i)-D(k)*Tau(i,k)
        else
          Tau(i,k+1)=W(i)-D(k)*Tau(i,k)-E(k-1)*Tau(i,k-1)
        end if
      end do
      v0=0.d0
	  do i=1, n
	    v0=v0+Tau(i,k+1)*Tau(i,k+1)
      end do
      if (v0<eps) then
        it=0
      else
        E(k)=v0/u0; u0=v0
      end if
    end if 
    k=k+1
  end do
  return
End

!*****************************************************
!* The procedure PCTR calculates the coefficients of *
!* the characteristic polynomial P(l)=A-l*I of a real*
!* square tridiagonal matrix A(i,j).                 *
!*                                                   *
!* Note: the roots of P(l) are the eigenvalues of    *
!*       matrix A(i,j).                              *
!* ------------------------------------------------- *
!* INPUTS:                                           *
!*          n: size of matrix (integer)              *
!*          B: vector of codiagonal terms products   *
!*             (see main program).                   *
!*          D: vector of main diagonal terms         *
!* OUTPUT:                                           *
!*          P: vector of coefficients of P(l)        *
!* ------------------------------------------------- *
!* (For demo of procedure PCTR alone, see program    *
!*  carpol.f90).                                     *
!*****************************************************
Subroutine PCTR(n,B,D,P)
real*8 B(1:n+1), D(1:n+1), P(1:n+1)
integer n,i,k, ialloc
real*8, pointer :: T(:)
  allocate(T(1:n),stat=ialloc)  
  P(2)=D(1); T(1)=1.d0; P(1)=-T(1)
  do k=2, n
    P(k+1)=D(k)*P(k)-B(k-1)*T(k-1)
    do i=k, 3, -1
      T(i)=P(i)
      P(i)=-T(i)+D(k)*P(i-1)-B(k-1)*T(i-2)
    end do
    T(2)=P(2); P(2)=-T(2)+D(k)*P(1)
    T(1)=P(1); P(1)=-T(1)
  end do
  return
End

!end of file carpol3.f90


