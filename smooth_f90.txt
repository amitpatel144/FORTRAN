!********************************************************************
!* SMOOTHING AN ARRAY OF N ORDINATES Y's (ASCENDING ORDER ABCISSAS) *
!* ---------------------------------------------------------------- *
!* Description:                                                     *
!* This program uses the procedure SMOOFT for smoothing an array of *
!* given ordinates (y's) that are in order of increasing abscissas  *
!* (x's), but without using the abscissas themselves supposed to be *
!* equally spaced. It first removes any linear trend, then uses a   *
!* Fast Fourier Transform procedure (REALFT) to low-pass filter the *
!* data. The linear trend is reinserted at the end. One user-speci- *
!* fied parameter, EPS, enters "the amount of smoothing", given as  *
!* the number of points over which the data should be smoothed.     *
!* ---------------------------------------------------------------- *
!* SAMPLE RUN:                                                      *
!* Input data file contains:                                        *
!* 1024                                                             *
!* 0.00000000000000E+0000 7.50000000000000E-0001                    *
!* 9.21288168207468E-0003 7.77368637910513E-0001                    *
!* 1.84257633641494E-0002 8.34466556277221E-0001                    *
!* 2.76386450462383E-0002 9.03071871110114E-0001                    *
!* 3.68515267282987E-0002 9.92958153417021E-0001                    *
!* 4.60644084103592E-0002 1.09195646826811E+0000                    *
!* 5.52772900924197E-0002 1.15230452277865E+0000                    *
!* 6.44901717745370E-0002 1.06763022290215E+0000                    *
!* 7.37030534565974E-0002 1.34541171127239E+0000                    *
!* 8.29159351386579E-0002 1.48611048393104E+0000                    *
!* 9.21288168207184E-0002 1.09349703210864E+0000                    *
!* 1.01341698502779E-0001 1.72386602840743E+0000                    *
!* 1.10554580184839E-0001 1.14317464708984E+0000                    *
!* ---------------------- ----------------------                    *
!* 9.37871355209791E+0000 2.43969819122867E+0001                    *
!* 9.38792643377383E+0000 2.42468007203424E+0001                    *
!* 9.39713931544975E+0000 2.42436619192304E+0001                    *
!* 9.40635219712567E+0000 2.42829449073179E+0001                    *
!* 9.41556507880159E+0000 2.42980085689633E+0001                    *
!* 9.42477796047751E+0000 2.43119449022633E+0001                    *
!*                                                                  *
!* Output file contains (here EPS=30):                              *
!*                                                                  *
!*       Time          Y        Smoothed Y                          *
!* ----------------------------------------                         *
!*     0.000000     0.750000     0.788489                           *
!*     0.009213     0.777369     0.816559                           *
!*     0.018426     0.834467     0.846303                           *
!*     0.027639     0.903072     0.877999                           *
!*     0.036852     0.992958     0.911780                           *
!*     0.046064     1.091956     0.947587                           *
!*     0.055277     1.152305     0.985167                           *
!*     0.064490     1.067630     1.024100                           *
!*     0.073703     1.345412     1.063859                           *
!*     0.082916     1.486110     1.103897                           *
!*     0.092129     1.093497     1.143733                           *
!*     0.101342     1.723866     1.183046                           *
!*     0.110555     1.143175     1.221739                           *
!*     --------     --------     --------                           *
!*     9.378709    24.396982    24.223680                           *
!*     9.387921    24.246801    24.246965                           *
!*     9.397134    24.243662    24.271065                           *
!*     9.406346    24.282946    24.295721                           *
!*     9.415559    24.298008    24.320887                           *
!*     9.424771    24.311945    24.346704                           *
!*                                                                  *
!* ---------------------------------------------------------------- *
!* Reference:  "Numerical Recipes By W.H. Press, B. P. Flannery,    *
!*              S.A. Teukolsky and W.T. Vetterling, Cambridge       *
!*              University Press, 1986" [BIBLI 08].                 *
!*                                                                  *
!*                              F90 Release By J-P Moreau, Paris.   *
!*                                      (www.jpmoreau.fr)           *
!********************************************************************
PROGRAM TEST_SMOOFT
parameter(NMAX=2048)

real  signal(NMAX), ysave(NMAX)

  !open input and output file
  OPEN(UNIT=2,FILE='smooth.lst',STATUS='UNKNOWN')	                              
  OPEN(UNIT=1,FILE='smooth.dat',STATUS='OLD')
  !read number of input signal points in input file
  read(1,*)  ndata
  !take nearest power of two
  if  (ndata > 2048) then
    ndata=2048; ip=11
  end if
  if (ndata<2048.and.ndata>1023) then
    ndata=1024; ip=10
  end if
  if (ndata<1024.and.ndata>511) then
    ndata=512; ip=9
  end if
  if (ndata<512.and.ndata>255) then
    ndata=256; ip=8
  end if
  if (ndata<256.and.ndata>127) then
    ndata=128; ip=7
  end if
  if (ndata<128.and.ndata>63) then
    ndata=64; ip=6
  end if
  if (ndata<64.and.ndata>31) then
    ndata=32; ip=5
  end if
  if  (ndata<32) then
    write(2,*) ' Error: number of points too small (<32) !'
    close(unit=2)
    print *,' Results in file smooth.lst (error).'
    stop
  end if
  !read ndata couples T(i), Y(i) in input data file
  do i=1, ndata
    read(1,*)  temp, signal(i)
    if (i.eq.1)     tbegin=temp
    if (i.eq.ndata) tend=temp
  end do
  close(unit=1)

  ysave=signal

  call SMOOFT(signal,ndata,30.)

  dt=(tend-tbegin)/(ndata-1)
  t=tbegin-dt
  write(2,*) '      Time          Y        Smoothed Y '
  write(2,*) '----------------------------------------'
  do i=1, ndata
    t=t+dt
    write(2,100)  t, ysave(i), signal(i)
  end do

  close(unit=2)
  print *,' '
  print *,'Results in file smooth.lst.'
  print *,' '
  stop

100 format('   ',F10.6,'   ',F10.6,'   ',F10.6)

END

SUBROUTINE SMOOFT(Y,N,PTS)
!---------------------------------------------------------------
! Smooths an array Y of length N, with a window whose full width
! is of order PTS neighboring points, a user supplied value. 
! Array Y is modified.
!---------------------------------------------------------------
Parameter(NMAX=2048)    !Double of maximum sample size
REAL Y(NMAX)
  
  M=2
  NMIN=N+2.*PTS
1 IF (M.LT.NMIN) THEN
    M=2*M
    GO TO 1
  END IF
  print *,' M=',M
  IF (M.GT.NMAX) Pause ' Sample too big.'
  CONST=(PTS/M)**2
  Y1=Y(1)
  YN=Y(N)
  RN1=1./(N-1)
  DO J=1, N             !Remove linear trend
    Y(J)=Y(J)-RN1*(Y1*(N-J)+YN*(J-1))
  END DO
  IF (N+1.LE.M) THEN
    DO J=N+1, M
	  Y(J)=0.
    END DO
  END IF
  MO2=M/2
  CALL REALFT(Y,MO2,1)  !Fourier transform
  Y(1)=Y(1)/MO2
  FAC=1.
  DO J=1, MO2-1
    K=2*J+1
    IF (FAC.NE.0.) THEN
      FAC=AMAX1(0.,(1.-CONST*J**2)/MO2)
	  Y(K)=FAC*Y(K)
	  Y(K+1)=FAC*Y(K+1)
    ELSE
      Y(K)=0.
	  Y(K+1)=0.
    END IF
  END DO
  FAC=AMAX1(0.,(1.-0.25*PTS**2)/MO2)  !Last point
  Y(2)=FAC*Y(2)
  CALL REALFT(Y,MO2,-1)  !Inverse Fourier transform
  DO J=1, N              !Restore linear trend
    Y(J)=RN1*(Y1*(N-J)+YN*(J-1))+Y(J)
  END DO
  RETURN
END

SUBROUTINE four1(data,nn,isign) 
INTEGER isign,nn 
REAL data(2*nn)
!-------------------------------------------------------------------------------------------- 
!Replaces data(1:2*nn) by its discrete Fourier transform, if isign is input as 1; or replaces 
!data(1:2*nn) by nn times its inverse discrete Fourier transform, if isign is input as -1. 
!data is a complex array of length nn or, equivalently, a real array of length 2*nn. nn 
!MUST be an integer power of 2 (this is not checked for!). 
!--------------------------------------------------------------------------------------------
INTEGER i,istep,j,m,mmax,n 
REAL tempi,tempr 
DOUBLE PRECISION theta,wi,wpi,wpr,wr,wtemp !Double precision for the trigonometric 
                                           !recurrences. 
  n=2*nn 
  j=1 
  do i=1,n,2  !This is the bit-reversal section of the routine. 
    if(j.gt.i)then 
      tempr=data(j)  !Exchange the two complex numbers. 
      tempi=data(j+1) 
      data(j)=data(i) 
      data(j+1)=data(i+1) 
      data(i)=tempr 
      data(i+1)=tempi 
    endif 
    m=nn 
1   if ((m.ge.2).and.(j.gt.m)) then 
      j=j-m 
      m=m/2 
      goto 1 
    endif 
    j=j+m 
  end do 
  mmax=2      !Here begins the Danielson-Lanczos section of the routine. 
2 if (n.gt.mmax) then  !Outer loop executed log2 nn times. 
    istep=2*mmax 
    theta=6.28318530717959d0/(isign*mmax) !Initialize for the trigonometric recurrence. 
    wpr=-2.d0*sin(0.5d0*theta)**2 
    wpi=sin(theta) 
    wr=1.d0 
    wi=0.d0 
    do m=1,mmax,2  !Here are the two nested inner loops.
      do i=m,n,istep 
        j=i+mmax  !This is the Danielson-Lanczos formula: 
        tempr=sngl(wr)*data(j)-sngl(wi)*data(j+1) 
        tempi=sngl(wr)*data(j+1)+sngl(wi)*data(j) 
        data(j)=data(i)-tempr 
        data(j+1)=data(i+1)-tempi 
        data(i)=data(i)+tempr 
        data(i+1)=data(i+1)+tempi 
      end do 
      wtemp=wr  !Trigonometric recurrence. 
      wr=wr*wpr-wi*wpi+wr 
      wi=wi*wpr+wtemp*wpi+wi 
    end do 
    mmax=istep 
    goto 2  !Not yet done. 
  endif     !All done. 
return 
END 

SUBROUTINE realft(data,n,isign) 
INTEGER isign,n 
REAL data(n) 
! USES four1
!------------------------------------------------------------------------------------------- 
!Calculates the Fourier transform of a set of n real-valued data points. Replaces this data 
!(which is stored in array data(1:n)) by the positive frequency half of its complex Fourier 
!transform. The real-valued first and last components of the complex transform are returned 
!as elements data(1) and data(2), respectively. n must be a power of 2. This routine 
!also calculates the inverse transform of a complex data array if it is the transform of real 
!data. (Result in this case must be multiplied by 2/n.) 
!--------------------------------------------------------------------------------------------
INTEGER i,i1,i2,i3,i4,n2p3 
REAL c1,c2,h1i,h1r,h2i,h2r,wis,wrs 
DOUBLE PRECISION theta,wi,wpi,wpr,wr,wtemp !Double precision for the trigonometric recurrences. 
  theta=3.141592653589793d0/dble(n/2)      !Initialize the recurrence. 
  c1=0.5 
  if (isign.eq.1) then 
    c2=-0.5 
    call four1(data,n/2,+1)                !The forward transform is here. 
  else
    c2=0.5                                 !Otherwise set up for an inverse transform. 
    theta=-theta 
  endif 
  wpr=-2.0d0*sin(0.5d0*theta)**2 
  wpi=sin(theta) 
  wr=1.0d0+wpr 
  wi=wpi 
  n2p3=n+3 
  do i=2,n/4  !Case i=1 done separately below. 
    i1=2*i-1 
    i2=i1+1 
    i3=n2p3-i2 
    i4=i3+1 
    wrs=sngl(wr) 
    wis=sngl(wi) 
    h1r=c1*(data(i1)+data(i3))  !The two separate transforms are separated out of data. 
	h1i=c1*(data(i2)-data(i4)) 
    h2r=-c2*(data(i2)+data(i4)) 
    h2i=c2*(data(i1)-data(i3)) 
    data(i1)=h1r+wrs*h2r-wis*h2i !Here they are recombined to form the true transform 
                                 !of the original real data. 
    data(i2)=h1i+wrs*h2i+wis*h2r 
    data(i3)=h1r-wrs*h2r+wis*h2i 
    data(i4)=-h1i+wrs*h2i+wis*h2r 
    wtemp=wr                     !The recurrence. 
    wr=wr*wpr-wi*wpi+wr 
    wi=wi*wpr+wtemp*wpi+wi 
  end do

  if (isign.eq.1) then 
    h1r=data(1) 
    data(1)=h1r+data(2) 
    data(2)=h1r-data(2)      !Squeeze the first and last data together to get 
                             !them all within the original array.
  else
    h1r=data(1) 
    data(1)=c1*(h1r+data(2)) 
    data(2)=c1*(h1r-data(2)) 
    call four1(data,n/2,-1)  !This is the inverse transform for the case isign=-1. 
  end if 
  return 
END 

!end of file smooth.f90
