!*************************************************************
!* This program calculates the determinant of a real square  *
!* matrix using a recursive function Deter based on Kramer's *
!* formula.                                                  *
!* --------------------------------------------------------- *
!* Method:                                                   *
!*                                                           *
!* Let us take the example:                                  *
!* n=5                                                       *
!* Input matrix is:   ( 3 2 1 6 3 )                          *
!*                    ( 6 4 4 0 3 )                          *
!*                    ( 4 0 1 0 2 )                          *
!*                    ( 3 4 2 4 2 )                          *
!*                    ( 4 6 1 5 2 )                          *
!*                                                           *
!* According to Kramer's rule, the determinant det(A) is     *
!* calculated by the following:                              *
!*                                                           *
!*              (4 4 0 3)         (6 4 0 3)       (6 4 0 3)  *
!* det = 3 * det(0 1 0 2) -2 * det(4 1 0 2) + 1 * (4 0 0 2)  *
!*              (4 2 4 2)         (3 2 4 2)       (3 4 4 2)  *
!*              (6 1 5 2)         (4 1 5 2)       (4 6 5 2)  *
!*                                                           *
!*              (6 4 4 3)         (6 4 4 0)                  *
!*      -6 * det(4 0 1 2) +3 * det(4 0 1 0)                  *
!*              (3 4 2 2)         (3 4 2 4)                  *
!*              (4 6 1 2)         (4 6 1 5)                  *
!*                                                           *
!* As can be seen, 3, -2, 1, -6 and 3 are the elements of    *
!* the 1st row alternatively multiplied by 1 or -1 and the   *
!* the submatrices are obtained by successively eliminating  *
!* row=1 and column=1, then row=1 and col=2, etc. Then you   *
!* can recursively calculate the detrminants of these sub-   *
!* matrices by using the same Function Deter with size n-1   *
!* instead of n, and so forth...                             *
!* When n=2, the result is immediate by the formula:         *
!* A(1,1)*A(2,2)-A(2,1)*A(1,2).                              *
!*                                                           *
!* Program organization:                                     *
!* After input of given square matrix A, here of size n=5,   *
!* we call the function Deter(n,A) which returns the value   *
!* of determinant. This function calls itself recursively    *
!* with n decreasing by one at each step, until n=2.         *
!* Auxiliary function is pow(n) returning -(-1)^n and auxi-  *
!* liary procedure is Submatrix(n,A,B) that extracts sub-    *
!* matrix B from A by eliminating row 1 and column col. Note *
!* that B is dynamically allocated and disposed of at each   *
!* step to spare memory.                                     *
!*                                                           *
!* SAMPLE RUN:                                               *
!*                                                           *
!* Size of matrix: 5                                         *
!* Input matrix  :                                           *
!*   3.0000  2.0000  1.0000  6.0000  3.0000                  *
!*   6.0000  4.0000  4.0000  0.0000  3.0000                  *
!*   4.0000  0.0000  1.0000  0.0000  2.0000                  *
!*   3.0000  4.0000  2.0000  4.0000  2.0000                  *
!*   4.0000  6.0000  1.0000  5.0000  2.0000                  *
!*                                                           *
!* Determinant = -7.00000000000000E+0001                     *
!*                                                           *
!* --------------------------------------------------------- *
!*                                                           *
!*                F90 release by Jean-Pierre Moreau, Paris.  *
!*                           (www.jpmoreau.fr)               *
!*************************************************************
!Note: do not use for n>10
program deter2a

  integer  n               ! size of matrix
  real, pointer :: A(:,:)  ! pointer to matrix(n,n)
  real det                 ! value of determinant
  
  integer  i, j

! read size n of matrix A from input file
  open(unit=1,file='mat10.dat',status='OLD')
  read (1,*)  n

! allocate memory for matrix A of size n x n
  allocate(A(1:n,1:n),stat=ialloc)

! read matrix A from input file
  read (1,*) ((A(i,j),j=1,n),i=1,n)

  close(unit=1)

  print *, ' '
  print *, ' Size of matrix: ', n
  print *, ' Input matrix:'
  call Matprint(n, A)
  print *, ' Computing determinant...'

  det = Deter(n,A)

  print *, ' '
  print *, ' Determinant = ', det
  print *, ' '

end

! return -(-1)**n
integer function pow(n)
  integer n
  if (MOD(n,2).eq.0) then
    pow = -1
  else 
    pow = 1
  end if
end

! return submatrix without 1st line and colth column of A
Subroutine Submatrix(n, col, A, B)
  integer n, col
  real A(n,n), B(n-1,n-1)
  integer i,j, flag

  if (n<4) return
  do i=1, n-1
    flag=0
    do j=1, n-1
	  if (j.ne.col) then
        if (flag==0) then
	  B(i,j)=A(i+1,j)
        else 
	  B(i,j)=A(i+1,j+1)
        end if
      else
        flag=1
        B(i,j)=A(i+1,j+1)
      end if
    end do
  end do
  return
end

! print square matrix A(n,n)
Subroutine Matprint(n, A)
  integer n
  real A(n,n)
  integer i,j
  write(*,10) ((A(i,j),j=1,n),i=1,n)
  return
10 format(10f4.0)
end

!return determinant of matrix A
recursive real function Deter(n, A)
  integer n
  real A(n,n)
  integer i, pow
  real d;
  real, pointer :: B(:,:)
  character*1 c

  d=0.0
  if (n==2) then
    Deter = A(1,1)*A(2,2)-A(1,2)*A(2,1)
    return
  else if (n==3) then
    d = A(1,1)*(A(2,2)*A(3,3)-A(3,2)*A(2,3))
    d = d-A(1,2)*(A(2,1)*A(3,3)-A(3,1)*A(2,3))
    d = d+A(1,3)*(A(2,1)*A(3,2)-A(3,1)*A(2,2))
    Deter = d
    return
  else
    do i=1, n
      if (n>3) then
! allocate memory to store submatrix of size n-1 x n-1
        allocate(B(1:n-1,1:n-1),stat=ialloc)
        call Submatrix(n,i,A,B)
        ! recursive call of Deter()
        d = d + pow(i)*A(1,i)*Deter(n-1,B)
      end if
    end do
    Deter = d
    return
  end if
end

! end of file deter2a.f90
